import { NextRequest, NextResponse } from 'next/server'
import { AmortizacionService } from '@/lib/services/amortizacion.service'
import { getUserIdFromRequest } from '@/lib/auth-middleware'

export async function GET(request: NextRequest) {
  try {
    // Obtener el userId del token de autenticaci√≥n
    const userId = await getUserIdFromRequest(request)
    if (!userId) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      )
    }
    const url = new URL(request.url)
    const activoId = url.searchParams.get('activoId')
    const clienteId = url.searchParams.get('clienteId')
    const categoriaId = url.searchParams.get('categoriaId')
    const a√±o = url.searchParams.get('a√±o')
    const mes = url.searchParams.get('mes')
    const resumen = url.searchParams.get('resumen')

    let amortizaciones

    if (resumen === 'true' && a√±o) {
      amortizaciones = await AmortizacionService.obtenerResumenAnual(parseInt(a√±o), userId)
    } else if (activoId) {
      amortizaciones = await AmortizacionService.obtenerPorActivo(parseInt(activoId), userId)
    } else if (clienteId) {
      amortizaciones = await AmortizacionService.obtenerPorCliente(
        parseInt(clienteId), 
        userId,
        a√±o ? parseInt(a√±o) : undefined
      )
    } else if (categoriaId) {
      amortizaciones = await AmortizacionService.obtenerPorCategoria(
        parseInt(categoriaId), 
        userId,
        a√±o ? parseInt(a√±o) : undefined
      )
    } else if (a√±o) {
      amortizaciones = await AmortizacionService.obtenerPorPeriodo(
        parseInt(a√±o), 
        userId,
        mes ? parseInt(mes) : undefined
      )
    } else {
      amortizaciones = await AmortizacionService.obtenerTodas(userId)
    }

    return NextResponse.json({
      success: true,
      data: amortizaciones
    })
  } catch (error) {
    console.error('Error obteniendo amortizaciones:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Error interno del servidor' 
      },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    // Obtener el userId del token de autenticaci√≥n
    const userId = await getUserIdFromRequest(request)
    if (!userId) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      )
    }
    const { a√±o, anio, mes, activo_id, cliente_id, categoria_id, metodo } = await request.json()
    
    // Aceptar tanto "a√±o" como "anio" para compatibilidad
    const a√±oValue = a√±o || anio
    
    console.log('üî¢ POST /api/amortizaciones - Datos recibidos:', { a√±o, anio, a√±oValue, mes, activo_id, cliente_id, categoria_id, metodo })
    
    if (!a√±oValue) {
      console.log('‚ùå Error: A√±o no proporcionado')
      return NextResponse.json(
        { success: false, error: 'El a√±o es requerido' },
        { status: 400 }
      )
    }

    console.log('‚öôÔ∏è Llamando a calcularAmortizacionesMasivas con par√°metros:', {
      a√±o: parseInt(a√±oValue),
      mes: mes ? parseInt(mes) : undefined,
      activo_id: activo_id ? parseInt(activo_id) : undefined,
      cliente_id: cliente_id ? parseInt(cliente_id) : undefined,
      categoria_id: categoria_id ? parseInt(categoria_id) : undefined,
      metodo: metodo || 'automatico',
      userId
    })

    const resultado = await AmortizacionService.calcularAmortizacionesMasivas({
      a√±o: parseInt(a√±oValue),
      mes: mes ? parseInt(mes) : undefined,
      activo_id: activo_id ? parseInt(activo_id) : undefined,
      cliente_id: cliente_id ? parseInt(cliente_id) : undefined,
      categoria_id: categoria_id ? parseInt(categoria_id) : undefined,
      metodo: metodo || 'automatico',
      userId
    })
    
    console.log('üìã Resultado del c√°lculo:', resultado)
    
    if (resultado.success) {
      return NextResponse.json(resultado, { status: 201 })
    } else {
      return NextResponse.json(resultado, { status: 400 })
    }
  } catch (error) {
    console.error('üí• Error calculando amortizaciones:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Error interno del servidor' 
      },
      { status: 500 }
    )
  }
}
